swagger: "2.0"
info:
  version: ""
  description: "This is a book catalog REST API."
  title: "carpriceTask"
  contact:
    name: "Denis Balyberdin"
    url: "https://kirov.hh.ru/resume/e027ba08ff099b647f0039ed1f7265376c4b64"
host: localhost:8080
tags:
- name: "Authors"
  description: "Everything about authors"
- name: "Books"
  description: "Everything about books"
schemes:
- "http"
paths:
  /authors/:
    post:
      tags:
      - "Authors"
      summary: "Add a new author to the catalog"
      description: ""
      operationId: "addAuthor"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Author object that needs to be added to the catalog"
        required: true
        schema:
          $ref: "#/definitions/Authors"
      responses:
        "200":
          description: "successful operation"
    put:
      tags:
      - "Authors"
      summary: "Updates an existing author"
      description: ""
      operationId: "updateAuthor"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Author object that needs to be updated in the catalog"
        required: true
        schema:
          $ref: "#/definitions/Authors"
      responses:
        "200":
          description: "successful operation"
    get:
      tags:
      - "Authors"
      summary: "Finds all authors"
      description: ""
      operationId: "getAllAuthors"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "Page no for pagination"
        required: false
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Authors"
  /authors/search/:
    get:
      tags:
      - "Authors"
      summary: "Finds all authors with specific parameter"
      description: "It is allowed to perform the search with only one parameter except Page"
      operationId: "getAuthors"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "Page no for pagination"
        required: false
        type: "integer"
      - name: "author_id"
        in: "query"
        description: "Author id"
        required: false
        type: "integer"
      - name: "first_name"
        in: "query"
        description: "Author's first name"
        required: false
        type: "string"
      - name: "last_name"
        in: "query"
        description: "Author's last name"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Authors"
  /authors/{author_id}:
    delete:
      tags:
      - "Authors"
      summary: "Deletes an author"
      description: ""
      operationId: "deleteAuthor"
      parameters:
      - name: "author_id"
        in: "path"
        description: "Author id to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
  /books/:
    post:
      tags:
      - "Books"
      summary: "Add a new book to the catalog"
      description: ""
      operationId: "addBook"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Book object that needs to be added to the catalog"
        required: true
        schema:
          $ref: "#/definitions/Books"
      responses:
        "200":
          description: "successful operation"
    put:
      tags:
      - "Books"
      summary: "Updates an existing book"
      description: ""
      operationId: "updateBook"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Book object that needs to be updated in the catalog"
        required: true
        schema:
          $ref: "#/definitions/Books"
      responses:
        "200":
          description: "successful operation"
    get:
      tags:
      - "Books"
      summary: "Finds all books"
      description: ""
      operationId: "getAllBooks"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "Page no for pagination"
        required: false
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Books"
  /books/search/:
    get:
      tags:
      - "Books"
      summary: "Finds all books with specific parameter"
      description: "It is allowed to perform the search with only one parameter except Page"
      operationId: "getBooks"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "Page no for pagination"
        required: false
        type: "integer"
      - name: "book_id"
        in: "query"
        description: "Book id"
        required: false
        type: "integer"
      - name: "title"
        in: "query"
        description: "Book's title"
        required: false
        type: "string"
      - name: "release_year"
        in: "query"
        description: "Books's release year"
        required: false
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Books"
  /books/search/{author_last_name}:
    get:
      tags:
      - "Books"
      summary: "Finds all books written by the author"
      description: ""
      operationId: "getBooksByAuthor"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "Page no for pagination"
        required: false
        type: "integer"
      - name: "author_last_name"
        in: "path"
        description: "Author last name to find"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Books"
  /books/{book_id}:
    delete:
      tags:
      - "Books"
      summary: "Deletes a book"
      description: ""
      operationId: "deleteBook"
      parameters:
      - name: "book_id"
        in: "path"
        description: "Book id to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
definitions:
  Authors:
    type: "object"
    properties:
      author_id:
        type: "integer"
        format: "int32"
        description: "On POST doesn't need to be set"
      first_name:
        type: "string"
      last_name:
        type: "string"
      born:
        type: "string"
        format: "date-time"
      died:
        type: "string"
        format: "date-time"
      books_no:
        type: "integer"
        format: "int32"
        description: "On POST and PUT doesn't need to be set"
  Books:
    type: "object"
    properties:
      book_id:
        type: "integer"
        format: "int32"
        description: "On POST doesn't need to be set"
      title:
        type: "string"
      release_year:
        type: "integer"
        format: "int32"
      abstract:
        type: "string"
      author_id:
        type: "integer"
        format: "int32"
      author_last_name:
        type: "string"
        description: "On POST and PUT doesn't need to be set"